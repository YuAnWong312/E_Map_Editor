PROJECT(Map)

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")
CMAKE_MINIMUM_REQUIRED(VERSION 2.4.7)

IF(COMMAND CMAKE_POLICY)
   CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

IF(WIN32)
    IF(MSVC)
        OPTION(WIN32_USE_MP "Set to ON to build OpenSceneGraph with the /MP option (Visual Studio 2005 and above)." ON)
        MARK_AS_ADVANCED(WIN32_USE_MP)
        IF(WIN32_USE_MP)
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
        ENDIF(WIN32_USE_MP)

        # More MSVC specific compilation flags
        ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
        ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
    ENDIF(MSVC)
ENDIF(WIN32)

SET( CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a debug postfix" )

SET(OUTPUT_BINDIR ${PROJECT_BINARY_DIR}/bin)
MAKE_DIRECTORY(${OUTPUT_BINDIR})

SET(OUTPUT_LIBDIR ${PROJECT_BINARY_DIR}/lib)
MAKE_DIRECTORY(${OUTPUT_LIBDIR})

IF(CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 5)
    SET(EXECUTABLE_OUTPUT_PATH ${OUTPUT_BINDIR})
    SET(LIBRARY_OUTPUT_PATH    ${OUTPUT_LIBDIR})
ELSE()
    # If CMake >= 2.6.0
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
    IF(WIN32)
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
    ELSE(WIN32)
        SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
    ENDIF(WIN32)
ENDIF()

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)

#LINK_DIRECTORIES( ${PROJECT_BINARY_DIR}/lib )

#OPTION(DYNAMIC_OSGCOLLISIONDETECTION "Set to ON to build osgCollisionDetection for dynamic linking.  Use OFF for static." ON)		
#OPTION(DYNAMIC_UTILS "Set to ON to build Utils for dynamic linking.  Use OFF for static." ON)
#OPTION(DYNAMIC_OSGDRAGGER "Set to ON to build osgDragger for dynamic linking.  Use OFF for static." ON)	
#OPTION(DYNAMIC_OSGVIRTUALASSEMBLY "Set to ON to build osgVirtualAssembly for dynamic linking.  Use OFF for static." ON)

#FIND_PACKAGE(Bullet)

#LIBRARY_NAME		 		library name
#HEADERS    		 		.h file
#SOURCES			 		.cpp file
#HEADERS_MOC        		.h moc
#FORMS_HEADERS				ui .h

#not need initial
#DYNAMIC_${DEFINITION}    	shared=ON or static=OFF
#${DEFINITION}_DYNAMIC		define macro

MACRO(LIBRARY)

	#add library
	IF(DYNAMIC_${DEFINITION})
		ADD_DEFINITIONS(-D${DEFINITION}_DYNAMIC)
		ADD_LIBRARY(${LIBRARY_NAME} SHARED 
		${HEADERS} 
		${SOURCES} 
		${HEADERS_MOC}
		${FORMS_HEADERS}
		)
	ELSE(DYNAMIC_${DEFINITION})
		ADD_DEFINITIONS(-D${DEFINITION}_STATIC)
		ADD_LIBRARY(${LIBRARY_NAME} STATIC 
		${HEADERS} 
		${SOURCES} 
		${HEADERS_MOC}
		${FORMS_HEADERS}
		)
	ENDIF(DYNAMIC_${DEFINITION})
	
	SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES PROJECT_LABEL "${LIBRARY_NAME}")
	SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES OUTPUT_NAME ${LIBRARY_NAME})
	SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
	
	IF(MINGW)
		SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES LINK_FLAGS_RELEASE "-mwindows -MP")
	ENDIF(MINGW)
	#prefix
	IF(MSVC_IDE)
		SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES PREFIX "../")
		SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES IMPORT_PREFIX "../")
	ENDIF(MSVC_IDE)
	
	#include header file
	SET(HEADERS_GROUP "Header Files")
	SOURCE_GROUP(
		${HEADERS_GROUP}
		FILES ${HEADERS}
	)
	
	#install
	SET(INSTALL_INCDIR include)
	SET(INSTALL_BINDIR bin)
	IF(WIN32)
		SET(INSTALL_LIBDIR bin)
		SET(INSTALL_ARCHIVEDIR lib)
	ELSE(WIN32)
		SET(INSTALL_LIBDIR lib${LIB_POSTFIX})
		SET(INSTALL_ARCHIVEDIR lib${LIB_POSTFIX})
	ENDIF(WIN32)

	INSTALL(
		TARGETS ${LIBRARY_NAME}
		RUNTIME DESTINATION ${INSTALL_BINDIR}
		LIBRARY DESTINATION ${INSTALL_LIBDIR}
		ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR}
	)

	INSTALL(
		FILES       ${HEADERS}
		DESTINATION ${INSTALL_INCDIR}/${LIBRARY_NAME}
	)
ENDMACRO(LIBRARY)


#APPLICATION_NAME	application name
#HEADERS    		.h file
#SOURCES			.cpp file
#HEADERS_MOC        .h moc
#FORMS_HEADERS		ui .h
MACRO(APPLICATION)

	#add execute
	ADD_EXECUTABLE(
		${APPLICATION_NAME}
		${HEADERS}
		${SOURCES}
		${HEADERS_MOC}
		${FORMS_HEADERS}
	)
	
	SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES PROJECT_LABEL "${APPLICATION_NAME}")
	SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES OUTPUT_NAME ${APPLICATION_NAME})
	SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
	
	#MinGW
	IF(MINGW)
		SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES LINK_FLAGS_RELEASE "-mwindows -MP")
	ENDIF(MINGW)
	#prefix
	IF(MSVC_IDE)
		SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE")
		SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
		
		SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES PREFIX "../")
		SET_TARGET_PROPERTIES(${APPLICATION_NAME} PROPERTIES IMPORT_PREFIX "../")
	ENDIF(MSVC_IDE)
	
	#include header file
	SET(HEADERS_GROUP "Header Files")
	SOURCE_GROUP(
		${HEADERS_GROUP}
		FILES ${HEADERS}
	)
	
	#install
	SET(INSTALL_INCDIR include)
	SET(INSTALL_BINDIR bin)
	IF(WIN32)
		SET(INSTALL_LIBDIR bin)
		SET(INSTALL_ARCHIVEDIR lib)
	ELSE(WIN32)
		SET(INSTALL_LIBDIR lib${LIB_POSTFIX})
		SET(INSTALL_ARCHIVEDIR lib${LIB_POSTFIX})
	ENDIF(WIN32)

	INSTALL(
		TARGETS ${APPLICATION_NAME}
		RUNTIME DESTINATION ${INSTALL_BINDIR}
		LIBRARY DESTINATION ${INSTALL_LIBDIR}
		ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR}
	)

	INSTALL(
		FILES       ${HEADERS}
		DESTINATION ${INSTALL_INCDIR}/${APPLICATION_NAME}
	)
ENDMACRO(APPLICATION)

FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(OpenSceneGraph REQUIRED)
FIND_PACKAGE(osgVirtualAssembly)
FIND_PACKAGE(Qt4)
FIND_PACKAGE(KDFDB)

#IF(BULLET_FOUND)
#	IF(QT4_FOUND)
#		ADD_SUBDIRECTORY(src/osgCollisionDetection)
#	ENDIF(QT4_FOUND)
#ENDIF(BULLET_FOUND)

ADD_SUBDIRECTORY(src)

